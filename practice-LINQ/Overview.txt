LINQ - Language Integrated Query
LINQ provides a common syntax that allows us to query the data from various data sources in a uniform manner.
LINQ Provider is a software component that sits between the LINQ Queries and the Data Source. 
LINQ (Language Integrated Query) providers are components that enable querying against a specific data source using the LINQ syntax in .NET

What is LINQ?
LINQ (Language Integrated Query) is a query syntax in C# that allows you to retrieve and manipulate data from various sources (Collections, Databases, XML, etc.) using a single, consistent query language.

Why Use LINQ?
	Readable & Concise – Replaces long loops with simple queries
	Type-Safe – Errors are caught at compile-time
	Consistent Syntax – Works with Arrays, Lists, Databases, XML, etc.
	Optimized Performance – Uses lazy evaluation for efficiency

Types of LINQ Queries/Types of LINQ Providers in .NET
	LINQ to Objects - Queries collections (Lists, Arrays, dictionary, etc.)
	LINQ to SQL (Entity Framework) - Queries SQL Server databases using System.Data.Linq
	LINQ to XML (XLINQ) - Queries XML documents using System.Xml.Linq
	LINQ to Entities - Queries Entity Framework models(DbContext)
	LINQ to DataSet - Queries in-memory DataSet and DataTable

How LINQ Works?
	Data Source: Any collection (List, Array, Database, etc.)
	Query Creation: Using LINQ methods (Where(), Select(), etc.)
	Query Execution: Results are fetched when needed (lazy evaluation)

Query Syntax vs. Method Syntax
	Query Syntax (SQL-like, Comprehension Syntax, readable)
	Method Syntax (Fluent API, chainable)
		Both syntaxes give the same result, but method syntax is more commonly used in real projects.

Lambda Expressions in LINQ:: SYNTAX :: (parameters) => expression_or_statement_block;
	are anonymous functions used in LINQ method syntax to create concise and readable queries.

	
LINQ API in .NET
	The LINQ API is built into System.Linq and provides a set of methods to perform operations on IEnumerable<T> and IQueryable<T>.
	--> Key Namespaces in LINQ API
		System.Linq: Core LINQ methods for in-memory collections (IEnumerable<T>)
		System.Data.Linq: LINQ to SQL (for database queries)
		System.Xml.Linq: LINQ to XML (for querying XML documents)
		System.Linq.Expressions: Used for dynamic LINQ queries
	--> The LINQ API consists of:
		1. Standard Query Operators (already covered earlier)
		2. LINQ Providers (for different data sources)
		3. Deferred vs. Immediate Execution
		4. LINQ Expression Trees
		5. Parallel LINQ (PLINQ)

Deferred Execution vs. Immediate Execution
1. Deferred Execution
	Query is not executed immediately when defined.
	It is executed only when iterated (foreach, .ToList(), .First(), etc.).
	Benefits: Improves performance and reduces memory usage.
2. Immediate Execution
	Query executes immediately and returns a result.
	Methods like .ToList(), .ToArray(), .Count(), .Sum() force execution.

LINQ Expression Trees
	Expression Trees represent LINQ queries as an object model.
	Used in LINQ to SQL, Entity Framework, and dynamic queries.
	Lambda expressions can be stored as data (Expression Trees) and analyzed dynamically.

Difference Between Lambda and Expression Trees
	Feature			Lambda Expression (Func<>)						Expression Tree (Expression<>)
	Execution		Directly executes								Builds a tree structure
	Use Case		In-memory collections (LINQ to Objects)			LINQ to SQL, EF, dynamic queries
	Modification	Cannot modify									Can be modified at runtime


Parallel LINQ (PLINQ)
	allows parallel execution of LINQ queries to improve performance.
	AsParallel() enables multi-threading for faster query execution.

Extension Methods: allow us to add methods to existing types without creating a new derived type, recompiling, or modifying the original type.
	
LINQ Operators: are nothing but a set of extension methods used to write the LINQ Query.

IEnumerator in C#: Whenever we want to work with in-memory objects, we need to use IEnumerator.
	Part of: System.Collections
	Purpose: It provides a simple iteration over a collection of a specified type. It’s primarily used for in-memory collections like arrays, lists, etc.
	Execution: When you use LINQ methods on an IEnumerable, the query is executed in the client’s memory. This means all the data is loaded into memory from the data source (like a database), and the operation is performed.
	Methods: The extension methods for IEnumerable are defined in the System.Linq.Enumerable class.
	Deferred Execution: It supports deferred execution, but the query logic is executed locally on the client side.
	Use Case: Best suited for working with in-memory data where the dataset is not too large.
	GetEnumerator Method:
		This is the only method defined in the IEnumerable interface. It returns an IEnumerator object, which provides the ability to iterate through the collection by exposing a Current property and MoveNext() and Reset() methods.

IQueryable in C#:  is an interface that is used to query data from a data source. is designed for querying data sources where the query is not executed until the object is enumerated.
	Part of: System.Linq
	Purpose: It is intended to query data from out-of-memory sources, like a database or web service. It is a powerful feature for LINQ, SQL, and Entity Framework.
	Execution: The query logic is translated into a format suitable for the data source (like SQL for a relational database). The query is executed on the server side, which can improve performance and reduce network traffic.
	Methods: The extension methods for IQueryable are defined in the System.Linq.Queryable class.
	Deferred Execution: Supports deferred execution, and the query is executed in the data source (like a database).
	Use Case: This is ideal for remote data sources, like databases, where you want to leverage server-side resources and minimize data transfer.

Key Differences Between IEnumerable and IQueryable in C#
	Execution Context: IEnumerable executes in the client memory, whereas IQueryable executes on the data source.
	Suitability: IEnumerable is suitable for LINQ to Objects and working with in-memory data. IQueryable is suitable for LINQ to SQL or Entity Framework to interact with databases.
	Performance: IQueryable can perform better for large data sets as it allows the database to optimize and filter data.












System.LINQ and System.Linq.Expression diff
LINQ to DataSet - Queries in-memory DataSet and DataTable --> what is in memory dataset and datatable, like ADO?
Expression in LINQ, Expression Tree in LINQ
Custom LINQ Operators
Deferred Execution vs Immediate Execution in LINQ - https://dotnettutorials.net/lesson/deferred-execution-vs-immediate-execution-in-linq/
groupby vs tolookup
https://dotnettutorials.net/lesson/paging-using-skip-and-take-method/
https://dotnettutorials.net/lesson/defaultifempty-method-in-linq/ - from joins
from https://dotnettutorials.net/lesson/linq-joins-in-csharp/ to https://dotnettutorials.net/lesson/linq-cross-join/
AsEnumerable, AsQueryable from lms, with tolist,todictionary,...
let and into keywords in linq
